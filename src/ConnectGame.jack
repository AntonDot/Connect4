class ConnectGame {
    field Array columnsCount;  
    field Board board;   // Игровое поле
    field int currentPlayer; // Текущий игрок (0 = черный, 1 = белый)
    field int rows, cols;    // Размеры поля (6x7)
    field boolean exitFlag;    // Флаг выхода из игры

    constructor ConnectGame new()
    {
        let rows = 6;        // 6 рядов
        let cols = 7;        // 7 столбцов
        let columnsCount = Array.new(cols); // Массив для хранения количества шаров в каждом столбце
        let exitFlag = false;    
        let board = Board.new(rows, cols); // Создаем двумерный массив для хранения игрового поля
        // Поле нужно для проверки на выигрыш
        let currentPlayer = 0; // Черный игрок начинает
        do Screen.clearScreen(); 
        return this;
    }

    method void drawBoard() 
    {
        var int x, y, xi, yi;

        do Screen.setColor(true);  // Цвет фона (чёрный)
        // Нарисуем черный прямоугольник. 
        //поверх него будем отрисовывать белые квадраты - клетки, чтобы в итоге получилась "сетка"
        do Screen.drawRectangle(129, 36, 379, 250);

        let y = 40;  // Начальная вертикальная позиция (по Y)
        let xi = 0;  // Индекс клетки по горизонтали
        let yi = 0;  // Индекс клетки по вертикали
        
        while (yi < 6) // Пройдем по всем строкам
        {  
            let x = 134;  // Начальная горизонтальная позиция (по X)

            while (xi < 7) // Пройдем по всем столбцам
            {  
                let xi = xi + 1;
                do Screen.setColor(false);  // Цвет фона (белый)
                do Screen.drawRectangle(x, y, x + 30, y + 30);  // Отрисовываем клетку
                let x = x + 35;  // Сдвигаем на 35 пикселей вправо (для следующего столбца)
            }
            let xi = 0;  // Сбрасываем индекс столбца
            let yi = yi + 1;  // Переходим к следующему ряду
            let y = y + 35;  // Сдвигаем вниз на 35 пикселей (для следующего ряда)
        }
        return;
    }

    method void run() 
    {
        var char key;    // Клавиша, нажатая игроком
        var Square square;
        var boolean escapeFlag;

        let escapeFlag = false;
        do drawBoard();  // Рисуем игровое поле
        let square = Square.new(134, 5, this, 0); // первым рисуем черный квадрат над доской

        while (~exitFlag & (~escapeFlag)) 
        {    
            while (key = 0) // ожидает нажатия кнопки
            {
                let key = Keyboard.keyPressed();               
            }

            if (key = 140) // esc - выход
            {
                let escapeFlag = true;
            }
            // в метод move передается соответствующее direction (1, 2, 3)
            if (key = 130) // стрелка влево
            { 
                do square.move(1);
            }
            if (key = 132) // стрелка вправо
            { 
                do square.move(2);
            }
            // стрелка вниз и если в текущем столбце есть свободное место
            if ((key = 133) & (columnsCount[square.getXi()] < 6))
            {
                do square.move(3);
                // устанавливает на текущем месте номер текущего игрока на доске
                do board.setCell(square.getXi(), columnsCount[square.getXi()], currentPlayer);
                // Увеличиваем кол-во квадратов в столбце
                let columnsCount[square.getXi()] = columnsCount[square.getXi()] + 1;
                //забываем про текущий квадрат, т.к. он нам больше не нужен
                do square.dispose(); 
                // Создаем новый квадрат для следующего игрока
                let currentPlayer = 1 - currentPlayer;
                let square = Square.new(134, 5, this, currentPlayer);

                if (~(board.findWinner() = 2)) // если есть победитель, т.е. вернулось не дефолтное значение(2)
                {
                    let exitFlag = true;
                }

                if (~(exitFlag))
                { 
                    let exitFlag = isBoardFull();
                }
            }
                
            let key = 0;
            do Sys.wait(200);
        }

        if (escapeFlag)
        {
            do Screen.clearScreen();
            do Output.moveCursor(10, 22);
            do Output.printString("You exited the game");

            
            while (key = 0) // ожидает нажатия кнопки
            {
                let key = Keyboard.keyPressed();
                do board.dispose();
                return;
            }
        }
	    if (exitFlag) 
        {
            do showResults();
        }  
        do board.dispose();
        return;
    }

    method boolean isBoardFull()
    {
        var int sum, index;
        let sum = 0;
        while (index < 7) // считаем, сколько занято клеток на доске
        {
            let sum = sum + columnsCount[index];
            let index = index + 1;
        }
        if (sum = 42) // если все (6*7) заполнены, игра окончена
        {
            return true;
        }
        return false;
    }

    method void showResults()
    {
        var boolean isDraw;
        var int winner;

        do Screen.clearScreen();
        let winner = board.findWinner();
        if (winner = 2) // если не нашлось победителя, то есть веронулось дефолтное значение (2)
        {
            do Output.moveCursor(9, 27);
            do Output.printString("It's a draw");
            do Output.moveCursor(10, 27);
            do Output.printString("Game Over");
        }
        else 
        {
            do Output.moveCursor(9, 22);
            do Output.printString("Player ");
            
            if (winner = 0) 
            {
                do Output.printString("Black");
            }
            else 
            {
                do Output.printString("White");
            }

            do Output.printString(" wins");
            do Output.moveCursor(11, 27);
	        do Output.printString("Game Over");
        }
        return;
    }
    
    method int getCountInColumn(int column)  // Подсчитывет кол-во квадратов в текущем столбце
    {
        return columnsCount[column];
    }

    method void dispose() // очищает память от игры
    {
        do Memory.deAlloc(this);
        return;
    }
}